/*
 * Copyright (C) 2018 HERE Global B.V. and its affiliate(s). All rights reserved.
 *
 * This software and other materials contain proprietary information controlled by HERE and are
 * protected by applicable copyright legislation. Any use and utilization of this software and other
 * materials and disclosure to any third parties is conditional upon having a separate agreement
 * with HERE for the access, use, utilization or disclosure of this software. In the absence of such
 * agreement, the use of the software is not allowed.
 */

import { DownloadManager } from "@here/download-manager";
import { UserAuth, UserAuthMode, UserAuthType } from "@here/oauth-requester";
import { AuthenticationCodeProvider } from "@here/omv-datasource";
import { LoggerManager } from "@here/utils";

const logger = LoggerManager.instance.create("verity_examples/common");

/**
 * Loads the Bearer Token from the TOKEN file that get generated by a CI job on jenkins.
 */
export async function loadTokenFromFile(): Promise<string | undefined> {
    const downloadManager = new DownloadManager();
    try {
        const file = await downloadManager.download(
            // tslint:disable-next-line:max-line-length
            "https://render-verity.jenkins.release.in.here.com/job/request-auth-token/lastSuccessfulBuild/s3/download/TOKEN"
        );
        logger.warn("Loading Token from generated token file, on expiration: Reload page!");
        if (file.ok) {
            return file.text();
        }
    } catch (err) {
        logger.warn("Could not load TOKEN from Jenkins: ", err);
    }
    return undefined;
}

let bearerTokenProviderPromise: Promise<AuthenticationCodeProvider | undefined> | undefined;

async function initializeBearerTokenProvider(): Promise<AuthenticationCodeProvider | undefined> {
    // loads the token from the CI generated TOKEN file
    const auth = new UserAuth({
        mode: UserAuthMode.FROM_FILE,
        type: UserAuthType.CLIENT_CREDENTIALS
    });
    try {
        await auth.getToken();
        // will throw if UserAuth doesn't work
        return () => auth.getToken();
    } catch (err) {
        logger.info(
            "getTokenProvider#: Token could not be generated, falling back to CI token ",
            err
        );
    }

    const tokenFromFile = await loadTokenFromFile();
    if (tokenFromFile === undefined) {
        logger.error(
            `getTokenProvider# Could not initialize WARP Datasource as no ` +
                `authentication is available`
        );
        return undefined;
    }
    return () => Promise.resolve(tokenFromFile);
}

export async function bearerTokenProvider() {
    if (bearerTokenProviderPromise === undefined) {
        bearerTokenProviderPromise = initializeBearerTokenProvider();
    }
    const tokenProvider = await bearerTokenProviderPromise;
    if (tokenProvider === undefined) {
        return "";
    }
    return tokenProvider();
}
