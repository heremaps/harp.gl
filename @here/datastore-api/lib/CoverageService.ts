/*
 * Copyright (C) 2017-2018 HERE Global B.V. and its affiliate(s).
 * All rights reserved.
 *
 * This software and other materials contain proprietary information
 * controlled by HERE and are protected by applicable copyright legislation.
 * Any use and utilization of this software and other materials and
 * disclosure to any third parties is conditional upon having a separate
 * agreement with HERE for the access, use, utilization or disclosure of this
 * software. In the absence of such agreement, the use of the software is not
 * allowed.
 */

/**
 * Data Coverage API
 * Data Coverage API
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Do not edit the class manually.
 */

import { UrlBuilder, RequestBuilder, RequestOptions } from './RequestBuilder';



/* ===================================================================
 * DataCoverageCoreAPIsApi
*/


/**
 * 
 *
 * @summary Retrieve Admin Areas showing DataCoverage in world for provided layer Id and version
 * @param layerId Unique Layer Identifier
 * @param version Version
 */
export function getDataCoverageAdminAreasUsingGET(builder: RequestBuilder, params: {  layerId: string; version: string; }): Promise<string> {
    const baseUrl = "/layers/{layerId}/adminareas"
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("version", params["version"]);

    const headers: { [header: string]: string; } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<string>(urlBuilder, options);
}

/**
 * 
 *
 * @summary Retrieve BitMap showing DataCoverage in world for provided layer id and version
 * @param layerId Unique Layer Identifier
 * @param version Version
 */
export function getDataCoverageBitmapUsingGET(builder: RequestBuilder, params: {  layerId: string; version: string; }): Promise<string> {
    const baseUrl = "/layers/{layerId}/bitmap"
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("version", params["version"]);

    const headers: { [header: string]: string; } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<string>(urlBuilder, options);
}

/**
 * 
 *
 * @summary Retrieve SizeMap data showing DataCoverage in world for provided layer id and version
 * @param layerId Unique Layer Identifier
 * @param version Version
 */
export function getDataCoverageSizeMapUsingGET(builder: RequestBuilder, params: {  layerId: string; version: string; }): Promise<string> {
    const baseUrl = "/layers/{layerId}/sizemap"
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("version", params["version"]);

    const headers: { [header: string]: string; } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<string>(urlBuilder, options);
}

/**
 * 
 *
 * @summary Retrieve Layer size data for provided layer id and version
 * @param layerId Unique Layer Identifier
 * @param version Version
 */
export function getDataCoverageSizeUsingGET(builder: RequestBuilder, params: {  layerId: string; version: string; }): Promise<string> {
    const baseUrl = "/layers/{layerId}/size"
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("version", params["version"]);

    const headers: { [header: string]: string; } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<string>(urlBuilder, options);
}

/**
 * 
 *
 * @summary Retrieve TimeMap showing DataCoverage in world for provided layer id and version
 * @param layerId Unique Layer Identifier
 * @param version Version
 */
export function getDataCoverageTimeMapUsingGET(builder: RequestBuilder, params: {  layerId: string; version: string; }): Promise<string> {
    const baseUrl = "/layers/{layerId}/timemap"
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("version", params["version"]);

    const headers: { [header: string]: string; } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<string>(urlBuilder, options);
}
